package com.skt.mobigen.hms.snapinfocollector.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.ibatis.session.ExecutorType;
import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.skt.mobigen.hms.snapinfocollector.context.Context;
import com.skt.mobigen.hms.snapinfocollector.util.HttpRequestUtil;
import com.skt.mobigen.hms.snapinfocollector.util.JsonParserUtil;

public class SnapAgreementInfoCollectorService implements Callable<String> {
	private Logger logger = LoggerFactory.getLogger(SnapAgreementInfoCollectorService.class);
	private Context context;

	public SnapAgreementInfoCollectorService(Context context) {
		this.context = context;
	}

	@SuppressWarnings("unchecked")
	public String call() {
		logger.debug("snap agreement info collector start");
		SqlSession session = null;
		try {
			session = context.getSqlSessionFactory().openSession(ExecutorType.BATCH, false);

			List<Map<String, Object>> connect_info_list = session.selectList("get_conncet_info");
			Map<String, Object> connect_info_map = new LinkedHashMap<>();
			for (Map<String, Object> connect_info : connect_info_list) {
				connect_info_map.put(connect_info.get("member_name").toString().trim(), connect_info);
			}

			Iterator<String> it = null;
			do {
				if (!connect_info_map.isEmpty()) {
					it = connect_info_map.keySet().iterator();
				} else {
					break;
				}
				String host_name = it.next();
				Map<String, Object> info_map = (Map<String, Object>) connect_info_map.get(host_name);

				// Test
//				info_map.put("member_host", "211.214.168.102");
//				info_map.put("rest_api_port", "3811");

				String p_url = "http://" + String.valueOf(info_map.get("member_host")).trim().concat(":")
						.concat(String.valueOf(info_map.get("rest_api_port")));
				String seed_member_url = p_url.concat("/v1/tribe/members");

				String response_str = null;
				try {
					response_str = HttpRequestUtil.sendRequest(seed_member_url);
				} catch (Exception e) {
					connect_info_map.remove(info_map.get("member_name").toString().trim());
					continue;
				}
				Map<String, Object> response_map = JsonParserUtil.jsontoMap(response_str);
				Map<String, Object> response_body = (Map<String, Object>) response_map.get("body");
				List<String> seed_member_list = (List<String>) response_body.get("members");
				for (String seed_member : seed_member_list) {
					connect_info_map.remove(seed_member);
				}
				
				//TODO
				if (connect_info_map.size() == 1) connect_info_map.remove("isdev");

				context.setSnap_connect_ip(info_map.get("member_host").toString().trim());
				context.setSnap_connect_port(info_map.get("rest_api_port").toString().trim());
			} while (it.hasNext());
			
			if (context.getSnap_connect_ip() == null) throw new Exception("connect fail");

			String p_url = context.getRest_proto().concat("://").concat(context.getSnap_connect_ip().concat(":"))
					.concat(String.valueOf(context.getSnap_connect_port()));
			String agreement_url = p_url.concat("/v1/tribe/agreements");

			Map<String, Object> response_map = JsonParserUtil.jsontoMap(HttpRequestUtil.sendRequest(agreement_url));
			Map<String, Object> response_body = (Map<String, Object>) response_map.get("body");
			Map<String, Object> agreement_map = (Map<String, Object>) response_body.get("agreements");
			
			if (!agreement_map.isEmpty()) {
				List<String> agreement_name_list = new ArrayList<>();
				for (String agreement_name : agreement_map.keySet()) {
					agreement_name_list.add(agreement_name);
				}
				Map<String, Object> insert_data_map = new HashMap<>();
				if (agreement_name_list.size() > 0 && !agreement_name_list.isEmpty())
					insert_data_map.put("agreement_name_list", agreement_name_list);

				session.update("update_init_agreement_flag");
				session.insert("insert_agreement_info", insert_data_map);
				session.delete("delete_agreement_synchronization");

				session.commit();
			} else {
				session.update("update_init_agreement_flag");
				session.delete("delete_agreement_synchronization");
				session.commit();
			}
			
			return "completed";
		} catch (Exception e) {
			logger.error(ExceptionUtils.getStackTrace(e));

			return "Agreement Info Collector ".concat(ExceptionUtils.getMessage(e));
		} finally {
			if (session != null)
				session.close();
		}

	}

}
