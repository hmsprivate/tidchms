<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hms_info">

	<select id="get_change_management_value" parameterType="String" resultType="hashMap">
		SELECT
			metric_name, metric_value
		FROM
			cm_node_info_detail
		WHERE metric_name in ((
			SELECT management_namespace from cm_change_management_namespace where node_seq is null and management_namespace like '/facter%'
			UNION
			SELECT management_namespace from cm_change_management_namespace where node_seq = #{node_seq})) and node_seq = #{node_seq}
		ORDER BY influx_collect_time DESC
<!-- 		SELECT -->
<!-- 			metric_name, metric_value -->
<!-- 		FROM -->
<!-- 			cm_node_info_detail -->
<!-- 		WHERE metric_name in ((SELECT management_namespace from cm_change_management_namespace )) and node_seq = #{node_seq} -->
<!-- 		ORDER BY influx_collect_time DESC -->
	</select>

	<select id="get_target_metric_name" parameterType="String" resultType="String">
		SELECT metric_name FROM cm_node_info_detail WHERE node_seq = #{node_seq}
	</select>
	
	<select id="get_agreement_seq_info" resultType="String">
		select  agreement_seq from cm_member_info GROUP BY agreement_seq
	</select>
	
	<select id="get_conncet_info" resultType="hashMap">
		select
			member_name,
			member_host,
			rest_api_port,
			agreement_seq
		from
			cm_member_info
		where
			use_flag = '1'
		order by member_seq asc
	</select>

	<select id="get_conncet_info_of_agreement" parameterType="String" resultType="hashMap">
		select
			member_name,
			member_host,
			rest_api_port
		from
			cm_member_info
		where
			agreement_seq = #{agreement_seq}
		and
			use_flag = '1'
	</select>

	<select id="get_agreement_seq" resultType="String" parameterType="String">
		select
			agreement_seq
		from
			cm_agreement_info
		where
			agreement_name = #{agreement_name}
	</select>
	
	<select id="get_member_list" resultType="hashMap">
		SELECT 
			member_seq,
			member_name,
			agreement_seq
		FROM 
			cm_member_info
		WHERE
			use_flag = '1'
	</select>

	<update id="update_member_info" parameterType="java.util.HashMap">
		<if test="member_info_list.size != 0">
			<foreach collection="member_info_list" item="item" separator=",">
				update cm_member_info
				<set>
					rest_api_port = #{item.rest_api_port},
					rest_insecure = #{item.rest_insecure},
					rest_proto = #{item.rest_proto},
					alter_agreement_flag = #{item.alter_agreement_flag}
				</set>
				<where>
					member_name = #{item.name}
					and
					member_host = #{item.host}
				</where>

			</foreach>
		</if>
	</update>

<!-- 	<insert id="insert_member_info" parameterType="java.util.HashMap"> -->
<!-- 		<if test="member_info_list.size != 0"> -->
<!-- 			insert into cm_member_info ( -->
<!-- 				member_name, -->
<!-- 				member_host, -->
<!-- 				rest_api_port, -->
<!-- 				rest_insecure, -->
<!-- 				rest_proto, -->
<!-- 				alter_agreement_flag -->
<!-- 			) values -->
<!-- 			<foreach collection="member_info_list" item="item" separator=","> -->
<!-- 				( -->
<!-- 					#{item.name}, -->
<!-- 					#{item.host}, -->
<!-- 					#{item.rest_api_port}, -->
<!-- 					#{item.rest_insecure}, -->
<!-- 					#{item.rest_proto}, -->
<!-- 					#{item.alter_agreement_flag} -->
<!-- 				) -->
<!-- 			</foreach> -->
<!-- 			ON DUPLICATE KEY UPDATE -->
<!-- 					rest_api_port = VALUES(rest_api_port), -->
<!-- 					rest_insecure = VALUES(rest_insecure), -->
<!-- 					rest_proto = VALUES(rest_proto), -->
<!-- 					alter_agreement_flag = VALUES(alter_agreement_flag) -->
<!-- 		</if> -->
<!-- 	</insert> -->
	
	

	<insert id="insert_task_info" parameterType="java.util.HashMap">
		<if test="task_list_info.size != 0">
			insert into cm_task_info (
				task_id,
				task_name,
				task_deadline,
				task_creation_timestamp,
				task_last_run_timestamp,
				task_hit_count,
				task_state,
				task_href,
				agreement_seq,
				last_up_time
			) values
			<foreach collection="task_list_info" item="item" separator=",">
				(
					#{item.id},
					#{item.name},
					#{item.deadline},
					#{item.creation_timestamp},
					#{item.last_run_timestamp},
					#{item.hit_count},
					#{item.task_state},
					#{item.href},
					#{item.agreement_seq},
					#{item.last_up_time}
				)
			</foreach>
			ON DUPLICATE KEY UPDATE
				task_creation_timestamp = VALUES(task_creation_timestamp),
				task_last_run_timestamp = VALUES(task_last_run_timestamp),
				task_hit_count = VALUES(task_hit_count),
				task_state = VALUES(task_state),
				task_href = VALUES(task_href),
				agreement_seq = VALUES(agreement_seq),
				last_up_time = VALUES(last_up_time)
		</if>
	</insert>
	
	<insert id="insert_manager_task_info" parameterType="java.util.HashMap">
		<if test="insert_value_list.size != 0">
			insert into cm_manager_task_info (
				task_file_name,
				task_file_contents,
				last_up_time	
			) values
			<foreach collection="insert_value_list" item="item" separator=",">
				(
					#{item.file_name},
					#{item.file_contents},
					#{last_up_time}
				)
			</foreach>
			ON DUPLICATE KEY UPDATE
				task_file_contents = VALUES(task_file_contents),
				last_up_time = VALUES(last_up_time)
		</if>
	</insert>

	<insert id="insert_plugin_info" parameterType="java.util.HashMap">
		<if test="plugin_list_info.size != 0">
			insert into cm_plugin_info (
				plugin_name,
				plugin_version,
				plugin_type,
				plugin_signed,
				plugin_status,
				plugin_loaded_timestamp,
				plugin_href,
				agreement_seq,
				last_up_time
			) values
			<foreach collection="plugin_list_info" item="item" separator=",">
				(
					#{item.name},
					#{item.version},
					#{item.type},
					#{item.signed},
					#{item.status},
					#{item.loaded_timestamp},
					#{item.href},
					#{item.agreement_seq},
					#{item.last_up_time}
				)
			</foreach>
			ON DUPLICATE KEY UPDATE
				plugin_signed = VALUES(plugin_signed),
				plugin_status = VALUES(plugin_status),
				plugin_loaded_timestamp = VALUES(plugin_loaded_timestamp),
				plugin_href = VALUES(plugin_href),
				last_up_time = VALUES(last_up_time)
		</if>
	</insert>
	
	<insert id="insert_manager_plugin_info" parameterType="java.util.HashMap">
		<if test="plugin_list_info.size != 0">
			insert into cm_manager_plugin_info (
				plugin_name,
				plugin_version,
				plugin_type,
				plugin_loaded_timestamp,
				last_up_time
			) values
			<foreach collection="plugin_list_info" item="item" separator=",">
				(
					#{item.name},
					#{item.version},
					#{item.type},
					#{item.loadedTimestamp},
					#{item.lastUpTime}
				)
			</foreach>
			ON DUPLICATE KEY UPDATE
				plugin_loaded_timestamp = VALUES(plugin_loaded_timestamp),
				last_up_time = VALUES(last_up_time)
		</if>
	</insert>

	<insert id="insert_metric_info" parameterType="java.util.HashMap">
		<if test="metric_info_list.size != 0">
			insert into cm_metric_info (
				metric_last_advertised_timestamp,
				metric_namespace,
				metric_version,
				metric_dynamic,
				metric_href
			) values
			<foreach collection="metric_info_list" item="item" separator=",">
				(
					#{item.lastAdvertisedTimestamp},
					#{item.namespace},
					#{item.version},
					#{item.dynamic},
					#{item.href}
				)
			</foreach>
			ON DUPLICATE KEY UPDATE
<!-- 				metric_last_advertised_timestamp = VALUES(metric_last_advertised_timestamp), -->
				metric_dynamic = VALUES(metric_dynamic)
<!-- 				metric_href = VALUES(metric_href) -->
		</if>
	</insert>

	<insert id="insert_agreement_info" parameterType="java.util.HashMap">
		<if test="agreement_name_list.size != 0">
			INSERT INTO cm_agreement_info (
			agreement_name,
			alter_agreement_flag
			) values
			<foreach collection="agreement_name_list" item="item" separator=",">
				(
				#{item},
				1
				)
			</foreach>
			ON DUPLICATE KEY UPDATE
			alter_agreement_flag = VALUES(alter_agreement_flag)
		</if>
	</insert>
	
	<insert id="insert_node_detail_info" parameterType="hashMap">
		<if test="node_detail_info_list.size != 0">
			INSERT INTO cm_node_info_detail (
				node_seq,
				metric_name,
				metric_value,
				metric_group_seq,
				influx_collect_time,
				datacenter,
				serialnumber
		) values
		<foreach collection="node_detail_info_list" item="item" separator=",">
			(
				#{item.node_seq},
				#{item.metric_name},
				#{item.metric_value},
				#{item.metric_group_seq},
				#{item.influx_collect_time},
				#{item.datacenter},
				#{item.serialnumber}
			)
		</foreach>
		ON DUPLICATE KEY UPDATE
			metric_value = VALUES(metric_value),
			metric_group_seq = VALUES(metric_group_seq),
			influx_collect_time = VALUES(influx_collect_time)
		</if>
	</insert>
	
	<insert id="insert_node_history" parameterType="hashMap">
		<if test="node_detail_info_list.size != 0">
			INSERT INTO cm_node_info_history (
				node_seq,
				metric_name,
				metric_value,
				metric_group_seq,
				influx_collect_time,
				change_flag,
				before_value,
				datacenter,
				serialnumber
		) values
		<foreach collection="node_detail_info_list" item="item" separator=",">
			(
				#{item.node_seq},
				#{item.metric_name},
				#{item.metric_value},
				#{item.metric_group_seq},
				#{item.influx_collect_time},
				<choose>
					<when test="item.change_flag != null">
						#{item.change_flag},
					</when>
					<otherwise>
						0,
					</otherwise>
				</choose>
				#{item.before_value},
				#{item.datacenter},
				#{item.serialnumber}
			)
		</foreach>
		ON DUPLICATE KEY UPDATE
				metric_value = VALUES(metric_value)
		</if>
	</insert>
	
	<insert id="insert_node_info" parameterType="hashMap">
		<if test="node_info_list.size != 0">
		insert into  cm_node_info (
				node_seq,
				serialnumber, 
				os_name, 
				cpu_type, 
				manufacture,
				model,
				memory, 
				cpu_cnt, 
				ip, 
				disk, 
				agreement_seq, 
				host_name, 
				os_version, 
				node_type,
				os_architecture,
				influx_collect_time
			) values
			<foreach collection="node_info_list" item="item" separator=",">
				(
					#{item.node_Seq},
					#{item.serialnumber}, 
					#{item.os_name}, 
					#{item.cpu_type}, 
					#{item.manufacture},
					#{item.model},
					#{item.memory}, 
					#{item.cpu_cnt}, 
					#{item.ip}, 
					#{item.disk}, 
					#{item.agreement_seq}, 
					#{item.host_name}, 
					#{item.os_version}, 
					#{item.node_type},
					#{item.os_architecture},
					#{item.influx_collect_time}
				)
			</foreach>
			ON DUPLICATE KEY UPDATE
				node_seq = VALUES(node_seq),
				os_name = VALUES(os_name),
				cpu_type = VALUES(cpu_type), 
				manufacture = VALUES(manufacture),
				model = VALUES(model),
				memory = VALUES(memory), 
				cpu_cnt = VALUES(cpu_cnt),
				ip = VALUES(ip),
				disk = VALUES(disk), 
				agreement_seq = VALUES(agreement_seq), 
				host_name = VALUES(host_name), 
				os_version = VALUES(os_version), 
				node_type = VALUES(node_type),
				os_architecture = VALUES(os_architecture),
				influx_collect_time = VALUES(influx_collect_time)
		</if>		
	</insert>
	
	<update id="update_init_agreement_flag" >
		update cm_agreement_info
			<set>
				alter_agreement_flag = 0
			</set>
	</update>
	
	<delete id="delete_agreement_synchronization">
		delete from cm_agreement_info
			<where>
				agreement_name != 'No Group'
			and
				alter_agreement_flag = 0
			</where>
	</delete>
	
	<update id="update_init_plugin_agreement" parameterType="String">
		update cm_plugin_info 
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = 'No Group')
			</set>
			<where>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = #{agreement_name}) 
			</where>
	</update>
	
	<update id="update_agreement_plugin_info" parameterType="java.util.HashMap">
		update cm_plugin_info
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = #{agreement_name}),
				alter_agreement_flag = 1
			</set> 
			<where>
				plugin_name = #{name} and
				plugin_version = #{version} and
				plugin_type = #{type}
			</where>
	</update>
	
	<update id="update_plugin_agreement_synchronization">
		UPDATE
			cm_plugin_info
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = 'No Group')
			</set>
			<where>
				alter_agreement_flag = 0
			</where>
	</update>
	
	<update id="update_init_task_agreement">
		update cm_task_info 
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = 'No Group')
			</set>
			<where>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = #{agreement_name}) 
			</where>
	</update>

	<update id="update_agreement_task_info" parameterType="java.util.HashMap">
		update cm_task_info
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = #{agreement_name}),
				alter_agreement_flag = 1
			</set> 
			<where>
				task_id = #{id}
			</where>
	</update>
	
	<update id="update_task_agreement_synchronization">
		UPDATE
			cm_task_info
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = 'No Group')
			</set>
			<where>
				alter_agreement_flag = 0
			</where>
	</update>
	
	<update id="update_init_member_agreement" parameterType="int">
		update cm_member_info
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = 'No Group')
			</set>
			<where>
				agreement_seq = #{agreement_seq}
			</where>
	</update>
	
	<update id="update_init_member_agreement_seq" parameterType="String">
		update cm_member_info
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = 'No Group')
			</set>
			<where>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = #{agreement_name})
			</where>
	</update>
	
	<update id="update_init_member_agreement_all">
		update cm_member_info
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = 'No Group')
			</set>
	</update>
	
	<update id="update_member_agreement" parameterType="java.util.HashMap">
		<if test="update_data_list.size != 0">
			update cm_member_info
				<set>
					agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = #{agreement_name}) 
				</set>
				<where>
					member_name in 
					<foreach collection="update_data_list" item="item" separator="," open="(" close=")">
						#{item}
					</foreach>
				</where>
		</if>
	</update>
	
	<update id="update_node_info_last_chg_time" parameterType="java.util.HashMap">
		update cm_node_info
			<set>
				last_change_time = #{last_chg_time}
			</set>
			<where>
				node_seq = #{node_seq}
			</where>
	</update>
	
	<update id="update_member_agreement_synchronization">
		update
			cm_member_info
			<set>
				agreement_seq = (select agreement_seq from cm_agreement_info where agreement_name = 'No Group')
			</set>
			<where>
				alter_agreement_flag = 0
			</where>
	</update>
	
	<delete id="delete_plugin_synchronization" parameterType="String">
		delete from cm_plugin_info
		<where>
			last_up_time != #{last_up_time}
		</where>
	</delete>
	
	<delete id="delete_task_synchronization" parameterType="String">
		delete from cm_task_info
		<where>
			last_up_time != #{last_up_time}
		</where>
	</delete>
	
	<insert id="insert_change_menagement_namespace" parameterType="java.util.HashMap">
		<if test="insert_data_list.size != 0">
			insert into cm_change_management_namespace (
				management_namespace,
				last_up_time
			) values
			<foreach collection="insert_data_list" item="item" separator=",">
				(
					#{item.namespace},
					#{item.last_up_time}
				)
			</foreach>
		</if>
	</insert>
	
</mapper>
